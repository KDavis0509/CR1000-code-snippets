' ========================================================================================
' CALUMET HARBOR GAP CHANNEL MASTER CONTROL PROGRAM
' DECODE TDRI CHANNEL MASTER PD0 FORMAT TO CR1000 DATALOGGER USING POLLING
' ========================================================================================
' This program will decode PD0 format binary data from a Channel Master set to polling
' mode (CF0xxxx).
'
' The basics of the program were derived from Michael R. Simpson's work with Jim DeRose
' in San Diego.
'
' Created by: Frank L. Engel, USGS ILWSC (fengel@usgs.gov)
Const ProgramVersionDate = 20150619

' ========================================================================================
' INSTRUCTIONS AND SETUP -- YOU MUST READ ME!!!
' ========================================================================================
' WHAT DOES THIS PROGRAM DO?
' This program will log the PD0 format binary data from a TDRI Channel Master. It is setup
' To LOG one ADCP. The program allows the CR100 to control when the ADCP starts pinging, 
' similar to using the ADCP in SDI-12 mode. The primary benefit to this approach is the 
' ability to process the full variable set returned by the ADCP via the PD0 format. For
' example, this program will allow you to record RSSI values--that is not included in the 
' SDI-12 standard output.
'
' HOW DO I CONNECT AND SETUP THE ADCP?
' 1. Use the RS-232 pigtails to connect the ADCP to the CR1000 via the COM port. Assign
'    the port contants:     
'         WIRING (for included rs232 pigtail, NOT CS branded pigtail):
'         C1  RED
'         C2  BROWN
'         G   YELLOW
Const ADCPCom1 = Com1  'TX/RX and GRD == RED/BRN/YELLOW
Const BaudRate = 9600
'
' 2. Decide the program Scan Rate. It should be about as long as the desired ADCP ensemble
'    time. E.g., if you want the ADCP to average 1-min velocities, then set the ScanRate
'    to 60 seconds.
Const ScanRate = 120 ' Seconds
'
' 3. Use WinH-ADCP to setup the instruments for ENGLISH units, PDO output. Take special 
'    notice of the WP, TP, and CF commands. YOU MUST ADD CF01110 TO THE USER COMMANDS
'    Record these values in the program:
Const WS       = 800           'Cell size in cm
Const WM       = 1             'Water mode
Const WP       = 100            'Num of water pings
Const WF       = 600           'Blanking distance in cm
Const TE       = "00:01:00.00" 'Time in ensemble. Not necessary to adjust this, but you can
Const TP       = "00:01.00"    'Time between pings
Const VP       = 1             'Num of acoustic stage pings
Const MaxBins  = 10            'WNxx
Const MaxBeams = 2             '2 for Channel Master
'
' 4. Now determine the size of an ensemble. The easiest way to do this is with
'    BBTalk. Start BBTalk and connect to the ADCP. Start Logging (F3). Log ONLY ONE 
'    ENSEMBLE by pressing TAB to start pinging. Stop logging (F3). Look at the size of the
'    log file. If you only logged ensemble data (no banner, wakeup output or otherwise)
'    the file size is the max bytes of an ensemble. Alternatively, you can use the CR1000
'    port sniffer (Terminal Emulator, "W" command)
'
'    NOTE: BBCheck will also give you an Ensemble Size in bytes. This is NOT the correct
'    Number. You MUST verify the actual number of transmitted bytes.
Const MaxBytes = 624+1 'Need to be NBytes(esn)+1

' 5. Compute the ensemble time delay. This is the amount of time that the CR1000 will wait 
'    before checking to see if there is data in the serial buffer. Make this number 
'    slightly MORE than the actual time it takes to get data back from the ADCP.
Const EsnTime  = 105  'Seconds cr1000 has to wait for an enemble (WP x TP + Overhead)
' ========================================================================================


' ========================================================================================
' OTHER DECLARATIONS
' ========================================================================================
'Program Control
Const ScanUnit = 2  ' Unit (1=sec,2=min,3=min)
'Const yes = True
'Const no = False

'ADCP specifics
Const BadVel   = -32768
Const FlowSign = 1 ' 1=LeftBank, -1=RightBank
Const BadDataIndicator = NAN

'Declare Helpful Constants
Const VelocityScaleWater = 1/304.8 'converts mm/sec to ft/sec
Const DepthScale = 1/328.08 'converts 0.1mm to ft
Const MetersToFeet = 3.280839895
Const DegToRad = (3.14159265358979323846/180)

'Data ID's -- These are the byte locations (HEX to DEC) of each part of the PD0 file
'DO NOT EDIT
Const FixedLeaderID 		    = 0 'data IDs located at the start of each data stream
Const FirmwareVersionID 	  = 2
Const VariableLeaderID 		  = 128
Const VelocityProfileID 	  = 256
Const CorrelationProfileID 	= 512
Const RSSIProfileID 		    = 768  ' Echo Intensity Profile Data
Const PGoodProfileID 		    = 1024
Const StatusProfileID 		  = 1280
Const SurfaceTrackStatusID 	= 16384
Const SurfaceTrackCmdID 	  = 16385

'Basic Variable Declarations
Public PTemp, BVoltage

'Declare variables to hold time values
Dim rTime(9) As Float
Alias rTime(4) = Hour
Alias rTime(5) = Minute
Alias rTime(6) = Second
Alias rTime(7) = MicroSecond
Public ElapsedTime As Float
Public DelayTimer As Float

'Decode Pre-screen Incoming Binary Declarations
'These are variables used in BeginProg before calls to any Subs
Dim Longarray(MaxBytes) As Long 'Array for the Raw Ensemble
Dim Nums(2) As Long
Public HeaderMismatch As Long
Public BadEnsemble As Long
Public ScanNo As Long
Public ADCPdataIn1 As Boolean
Public WakeUpProbe As Boolean
Public ReceivedBytes As Long
Public Numbytes
Public NumbytesZero As Long

'Declarations for ChecksumCheck
Public BadChecksum As Long
Public CalcCheckSum As Long
Public EnsChecksum As Long
Dim EnsembleLen As Long
Dim TempL As Long
Dim MSB As Long
Dim MSB1 As Long
Dim LSB As Long

'Declarations for MainDecode
Public Counter As Long
Public Datatypes As Long
Dim Offsets(20) As Long
Public FixedLeadOffset As Long
Public VarLeadOffset As Long
Public VelocityOffset As Long
Public CorrelationOffset As Long
Public RSSIOffset As Long
Public SurfaceTrackStatusOffset As Long
Public NumBeams As Long
Public NumBins As Long			'WN'
Public EnsPings As Long			'WP'
Public BinSize As Long			'WS'
Public BlankDist As Long 		'WF'
Public ADCPSerialNo As Long
Dim TempID As Long				'Place to store variable Offsets to match specific Datatypes

'Declarations for VarLeadDecode
Dim Temp As Long
Public BIT As Long
Public EnsembleNo As Long
Public ADCPYear As Long
Public ADCPMonth As Long
Public ADCPDay As Long
Public ADCPHour As Long
Public ADCPMinute As Long
Public ADCPSecond As Long
Public ADCPHundreth As Long
Public ADCPTimeStr As String * 20
Public ADCPpitch As Float
Public ADCProll As Float
Public ADCPtempC As Float
Public ADCPtempF As Float
Public ADCPvolts As Float

'Declarations for VelocityDecode
Dim Bin As Long 'counters for bins
Public StartBin As Long
Public EndBin As Long
Dim Beam As Long 'counters for beams
Dim Index As Long 'temporary variable
Dim BinVel As Float 'test variable
Dim BinStep As Long 'counter variable
Dim EnsBin As Long 'counter variable
Public ensVelocity(MaxBins,MaxBeams) As Float
Public Vel1(MaxBins) As Float
Public Vel2(MaxBins) As Float

'Declarations for CorrelationDecode
Public ensCorrelation(MaxBins,MaxBeams) As Float
Dim NCorr As Long
Dim AccumCorr As Long
Public avgCorrelation(MaxBins)

'Declarations for RSSIDecode
Public ensRSSI(MaxBins,MaxBeams) As Float
Dim NRSSI As Long
Dim AccumRSSI As Long
Dim AvgRSSIAccum As Long
Dim AvgRSSIcounter As Long
Public avgRSSI(MaxBins)

'Declarations for SurfaceTrackStatusDecode
Dim LSB1 As Long
Public VBDepth As Float
Public PDepthMin As Float
Public PDepthMax As Float
Public PDepth As Float

'Declarations for StartPinging
Public ADCPComPort
Public CSCmd As String
Public Banner As String
Public Warning As String

'Declarations for
Public ADCPDataRead1 As Boolean

'Various counters for loops
Dim i, j, k, m, v As Long

'Unassigned
Public dummy As Boolean
Public b As Long
'Dim NextBin As Long
'Public UseAutoLastBin As Boolean
'Public CDMAFailure As Boolean

' ========================================================================================
' DATA TABLES
' ========================================================================================
DataTable (StationStatus,True,-1)
  Sample(1,PTemp,FP2)
  Sample(1,BVoltage,FP2)
EndTable

DataTable (ADCPcheck1,True,-1)
  OpenInterval
  'CardOut (xxx,xxx)
  Sample(1,ADCPSerialNo,Long)
  Sample(1,ADCPTimeStr,String)
  Sample(1,ADCPpitch,FP2)
  Sample(1,ADCProll,FP2)
  Sample(1,VBDepth,FP2)
  Sample(1,PDepth,FP2)
  Sample(MaxBins,Vel1(),FP2)
  Sample(MaxBins,Vel2(),FP2)
  Sample(MaxBins,avgCorrelation(),FP2)
  Sample(MaxBins,avgRSSI(),FP2)
EndTable

DataTable (TwoMinute,True,-1)
  OpenInterval
  CardOut (0,-1)
  'Sample(1,ADCPSerialNo,Long)
  'Sample(1,ADCPTimeStr,String)
  Sample(1,BVoltage,FP2)
  Sample(1,ADCPpitch,FP2)
  Sample(1,ADCProll,FP2)
  Sample(1,VBDepth,FP2)
  Sample(1,PDepth,FP2)
  Sample(MaxBins,Vel1(),FP2)
  Sample(MaxBins,Vel2(),FP2)
  Sample(MaxBins,avgCorrelation(),FP2)
  Sample(MaxBins,avgRSSI(),FP2)
EndTable

' ========================================================================================
' SUBROUTINES
' ========================================================================================
'            Name                           Description
'-------------------------- ------------------------------------------
' MainDecode                 Drives decoding of PD0 format
' VarLeadDecode              Decodes the Variable Leader
' VelocityDecode             Decodes the Velocity Profile Data
' CorrelationDecode          Decodes Correlation Profile Data
' RSSIDecode                 Decodes Echo Intensity Profile Data
' SurfaceTrackStatusDecode   Decodes Surface track Status
' ChecksumCheck              Compares calc checksum with raw checksum
' StartPinging               Sends a CS command to the ADCP
' CheckADCPData              Checks for valid ADCP header and data
' ZeroADCPArrays             Clear the ADCP arrays (called after CallTable)
' SerialPortListener         Grabs the serial data within the SubScan

'______________________________Main Decoder_______________________________________________
'Main Decoder for Workhorse PD0 file. This Is run after incoming data has passed checks in
'main program scan. This decoder parses out the various data types and the variables that
'are contained in the fixed header data type. The variable data types are decoded in
'separate subroutines and those subroutines are called from this subroutine.
Sub MainDecode
  Datatypes = Longarray(6)
  'Get data offsets for each data type
  For j = 1 To (Datatypes*2) Step 2
    LSB = Longarray(j+6)
    MSB = Longarray(j+7)
    Offsets(Counter)=(LSB + (MSB*256)) + 1
    Counter = Counter + 1
  Next j
  'Get fixed leader offset
  FixedLeadOffset = Offsets(1)
  'Get variable leader offset
  VarLeadOffset = Offsets(2)

  FixedLeadOffset = FixedLeadOffset - 1 'to line up with RDI Documentation
  'get number of Beams
  NumBeams = Longarray(FixedLeadOffset + 9)
  'Get number of Bins
  NumBins = Longarray(FixedLeadOffset + 10)
  'Get Pings per Ensemble
  'When you decode 2 byte binary data, you have to multiply the most significant byte
  'by 256
  LSB = Longarray(FixedLeadOffset + 11)
  MSB = Longarray(FixedLeadOffset + 12)
  EnsPings = LSB + (MSB * 256)
  'Get Bin Size
  LSB = Longarray(FixedLeadOffset + 13)
  MSB = Longarray(FixedLeadOffset + 14)
  BinSize = LSB + (MSB * 256)
  'Get Blanking distance
  LSB = Longarray(FixedLeadOffset + 15)
  MSB = Longarray(FixedLeadOffset + 16)
  BlankDist = LSB + (MSB * 256)
  'Get Probe Serial Number
  LSB = Longarray(FixedLeadOffset + 55)
  MSB = Longarray(FixedLeadOffset + 56)
  ADCPSerialNo = LSB + (MSB * 256)

  'get Variable Header Data
  Call VarLeadDecode

  'Loop through remaining data types, verify their profile IDs and assign proper offsets
  'Other data can be accommodated here if need be IE percent good etc
  'If profile IDs match the required data types, then call the appropriate decoders
  For m = 3 To Datatypes
    LSB = Longarray(Offsets(m))
    MSB = Longarray(Offsets(m) + 1)
    TempID = LSB + (MSB * 256)
    Select Case TempID
    Case VelocityProfileID
      'OK it matches Velocity ID
      VelocityOffset = Offsets(m)
      Call VelocityDecode
    Case CorrelationProfileID
      'Ok it matches Correlation ID
      CorrelationOffset = Offsets(m)
      Call CorrelationDecode
    Case RSSIProfileID
      'OK it matches RSSI ID
      RSSIOffset = Offsets(m)
      Call RSSIDecode
    Case SurfaceTrackStatusID
      'Ok it matches Surface track (vertical beam) Status ID
      SurfaceTrackStatusOffset = Offsets(m)
      Call SurfaceTrackStatusDecode
    EndSelect
  Next m

  'After calling all the decoders, Zero out the LongArray
  For v = 1 To 1500
    Longarray(v) = 0
  Next v
EndSub ' MainDecode

'__________________________Variable Leader Decoder______________________________________
'This Sub decodes the variable leader from the longArray
Sub(VarLeadDecode)
  VarLeadOffset = VarLeadOffset - 1 'to line up with RDI Documentation
  'When you decode 2 byte binary data, you have to multiply the most significant byte
  'by 256
  LSB = 0
  MSB = 0
  Temp = 0

  'get Ensemble Number
  LSB = Longarray(VarLeadOffset + 3)
  MSB = Longarray(VarLeadOffset + 4)
  MSB1 = Longarray(VarLeadOffset + 12)
  EnsembleNo = (256^2 * MSB1) + (256 * MSB) + LSB

  'Get time from ADCP real time clock
  ADCPYear = Longarray(VarLeadOffset + 5)
  ADCPMonth = Longarray(VarLeadOffset + 6)
  ADCPDay = Longarray(VarLeadOffset + 7)
  ADCPHour = Longarray(VarLeadOffset + 8)
  ADCPMinute = Longarray(VarLeadOffset + 9)
  ADCPSecond = Longarray(VarLeadOffset + 10)
  ADCPHundreth = Longarray(VarLeadOffset + 11)
  ADCPTimeStr = ADCPMonth & "/" & ADCPDay & "/" & ADCPYear & CHR(20) & ADCPHour & _
  ":" & ADCPMinute & ":" & ADCPSecond & "." & ADCPHundreth

  'get BIT
  LSB = Longarray(VarLeadOffset + 13)
  MSB = Longarray(VarLeadOffset + 14)
  BIT = (256 * MSB) + LSB

  'get Pitch
  LSB = Longarray(VarLeadOffset + 21)
  MSB = Longarray(VarLeadOffset + 22)
  Temp = (256 * MSB) + LSB
  If Temp > 32767 Then
    Temp = Temp - 65536
  EndIf
  ADCPpitch = Temp * 0.01 'Pitch scale factor

  'get Roll
  LSB = Longarray(VarLeadOffset + 23)
  MSB = Longarray(VarLeadOffset + 24)
  Temp = (256 * MSB) + LSB
  If Temp > 32767 Then
    Temp = Temp - 65536
  EndIf
  ADCProll = Temp * 0.01 'Roll scale factor

  'Get Temperature
  LSB = Longarray(VarLeadOffset + 27)
  MSB = Longarray(VarLeadOffset + 28)
  Temp = (256 * MSB) + LSB
  If Temp > 32767 Then
    Temp = Temp - 65536
  EndIf
  ADCPtempC = Temp * 0.01 'Temperature scale factor
  ADCPtempF = ADCPtempC * 9/5 + 32

  'get ADCPvolts
  ADCPvolts = Longarray(VarLeadOffset +36)
EndSub 'VarLeadDecod

'________________________________Velocity Decoder_______________________________________
' This Sub decodes the Velocity Profile Data
Sub(VelocityDecode)
  'VelocityOffset = VelocityOffset + 1 'to line up with RDI Documentation
  'initialize output Arrays
  'If FlowSign = 0 Then FlowSign = 1
  For Bin = 1 To MaxBins
    For Beam = 1 To MaxBeams
      ensVelocity(Bin,Beam) = BadDataIndicator
    Next Beam
  Next Bin
  BinStep = 1
  EnsBin = 0
  For Bin = 1 To NumBins 'Start at Bin 1 Vel 1
    Temp = VelocityOffset + 8 * EnsBin 'Jump to first velocity bytes
    EnsBin = EnsBin + BinStep
    For Beam = 1 To NumBeams
      Index = Temp + 2 * Beam 'index down Two bytes each beam
      LSB = Longarray(Index)
      MSB = Longarray(Index + 1)
      BinVel = (256 * MSB) + LSB
      If BinVel = 32768 Then
        ensVelocity(Bin, Beam) = BadDataIndicator 'bad data
      Else
        If BinVel > 32767 Then 'Handle twos compliment (negative velocity)
          BinVel = BinVel - 65536
          'BinVel = BinVel * VelocityScaleWater
          If BinVel < -32767 Then 'Smallest possible velocity
            BinVel = BadDataIndicator 'bad data
          Else 'apply flow sign
            BinVel = BinVel * VelocityScaleWater
            BinVel = BinVel * FlowSign
          EndIf
          ensVelocity(Bin,Beam) = BinVel
        Else
          'BinVel = BinVel * VelocityScaleWater
          If BinVel > 32767 Then 'Largest possible velocity
            BinVel = BadDataIndicator 'bad data
          Else
            BinVel = BinVel * VelocityScaleWater
            BinVel = BinVel * FlowSign
          EndIf
          ensVelocity(Bin,Beam) = BinVel
        EndIf
      EndIf
    Next Beam
    Vel1(Bin) = ensVelocity(Bin,1) 'Separate the big array into sub arrays
    Vel2(Bin) = ensVelocity(Bin,2)
  Next Bin
EndSub 'VelocityDecode

'_______________Decode Correlation data and averages beams for each bin___________________
Sub(CorrelationDecode)
  'initialize output Arrays
  For Bin = 1 To MaxBins
    For Beam = 1 To MaxBeams
      ensCorrelation(Bin,Beam) = 0
    Next Beam
  Next Bin
  BinStep = 1
  EnsBin = 0
  CorrelationOffset = CorrelationOffset + 1 'to get past 2 byte ID
  For Bin = 1 To NumBins 'Start at Bin 1 Beam 1
    NCorr = 0
    AccumCorr = 0
    Temp = CorrelationOffset + (4 * EnsBin) 'jump down 4 bytes each bin
    EnsBin = EnsBin + BinStep
    For Beam = 1 To NumBeams 'only grab one byte each loop
      AccumCorr = AccumCorr + Longarray(Temp + Beam)
      NCorr = NCorr + 1
      ensCorrelation(Bin,Beam) = Longarray(Temp + Beam) 'could also average here
    Next Beam
    Select Case NCorr 'average beams for each bin
    Case 0
      avgCorrelation(Bin)= 0
    Case 1
      avgCorrelation(Bin) = AccumCorr
    Case 2 To 4
      avgCorrelation(Bin) = AccumCorr / NCorr
    Case Else
      avgCorrelation(Bin) = 0
    EndSelect
  Next Bin
EndSub 'CorrelationDecode

'_________Decode Backscatter Amplitude data and averages beams for each bin_______________
Sub(RSSIDecode)
  'initialize output Arrays
  For Bin = 1 To MaxBins
    For Beam = 1 To MaxBeams
      ensRSSI(Bin,Beam) = 0
    Next Beam
  Next Bin
  BinStep = 1
  EnsBin = 0
  RSSIOffset = RSSIOffset + 1 'to get past 2 byte ID
  For Bin = 1 To NumBins 'Start at Bin 1 Beam 1
    NRSSI = 0 'zero beamwise rssi counter
    AccumRSSI = 0 'zero beamwise rssi accumulator
    AvgRSSIAccum = 0 'zero binwise rssi accumulator
    AvgRSSIcounter = 0 'zero binwise rssi counter
    Temp = RSSIOffset + (4 * EnsBin) 'jump down 4 bytes each bin
    EnsBin = EnsBin + BinStep
    For Beam = 1 To NumBeams 'only grab one byte each loop
      AccumRSSI = AccumRSSI + Longarray(Temp + Beam)
      NRSSI = NRSSI + 1
      ensRSSI(Bin,Beam) = Longarray(Temp + Beam) 'could also average here
    Next Beam
    Select Case NRSSI 'average beams for each bin
    Case 0
      avgRSSI(Bin)= 0
    Case 1
      avgRSSI(Bin) = AccumRSSI
    Case 2 To 4
      avgRSSI(Bin) = AccumRSSI / NRSSI
    Case Else
      avgRSSI(Bin) = 0
    EndSelect
  Next Bin
EndSub 'RSSIDecode

'__________________________Surface Track Status Decoder___________________________________
Sub(SurfaceTrackStatusDecode)
  SurfaceTrackStatusOffset = SurfaceTrackStatusOffset - 1 'to line up with RDI Documentation
  'When you decode 2 byte binary data, you have to multiply the most significant byte
  'by 256
  LSB = 0
  LSB1 = 0
  MSB = 0
  MSB1 = 0

  'get Depth (Corrected Surface Track)
  LSB  = Longarray(SurfaceTrackStatusOffset + 3)
  LSB1 = Longarray(SurfaceTrackStatusOffset + 4)
  MSB  = Longarray(SurfaceTrackStatusOffset + 5)
  MSB1 = Longarray(SurfaceTrackStatusOffset + 6)
  VBDepth =((256^3 * MSB1) + (256^2 * MSB) + (256 * LSB1) + LSB)
  If VBDepth <> 0 Then
    VBDepth = VBDepth/10000 * 1/0.3048
  Else
    VBDepth = BadDataIndicator
  EndIf

  'get Depth (Corrected Pressure Min/Max)
  LSB  = Longarray(SurfaceTrackStatusOffset + 39)
  LSB1 = Longarray(SurfaceTrackStatusOffset + 40)
  MSB  = Longarray(SurfaceTrackStatusOffset + 41)
  MSB1 = Longarray(SurfaceTrackStatusOffset + 42)
  PDepthMin =((256^3 * MSB1) + (256^2 * MSB) + (256 * LSB1) + LSB)
  If PDepthMin <> 0 Then
    PDepthMin = PDepthMin/10000 * MetersToFeet
  Else
    PDepthMin = BadDataIndicator
  EndIf

  'get Depth (Corrected Pressure Max)
  LSB  = Longarray(SurfaceTrackStatusOffset + 43)
  LSB1 = Longarray(SurfaceTrackStatusOffset + 44)
  MSB  = Longarray(SurfaceTrackStatusOffset + 45)
  MSB1 = Longarray(SurfaceTrackStatusOffset + 46)
  PDepthMax =((256^3 * MSB1) + (256^2 * MSB) + (256 * LSB1) + LSB)
  If PDepthMax <> 0 Then
    PDepthMax = PDepthMax/10000 * MetersToFeet
  Else
    PDepthMax = BadDataIndicator
  EndIf
  PDepth = (PDepthMin + PDepthMax)/2
EndSub 'SurfaceTrackStatusDecode


'____Calculate a Checksum for the ensemble and extract ensemble checksum _________________
Sub ChecksumCheck
  'Get ensemble length (from the header)
  LSB = Longarray(3)
  MSB = Longarray(4)
  EnsembleLen = LSB + (MSB*256)
  'calculate checksum here to see if it matches the checksum sent by the ADCP
  CalcCheckSum = 0
  k = 0
  For k = 1 To EnsembleLen
    CalcCheckSum = CalcCheckSum + Longarray(k)
  Next k
  CalcCheckSum = 65535 AND CalcCheckSum
  EnsChecksum = Longarray(k)
  TempL = Longarray(k + 1)
  EnsChecksum = EnsChecksum + TempL * 256
EndSub

'_____________________Send CS command to ADCP_____________________________________________
'Sub StartPinging (ADCPComPort)
'	Banner = ""
'	Warning = ""
'	SerialFlush (ADCPComPort)
'	SerialOpen (ADCPComPort,BaudRate,0,0,2000)
'  SerialOut (ADCPComPort,"CS" + CHR(13) + CHR(10),"",0,0)'CS command to start pinging
'	SerialFlush (ADCPComPort)
'EndSub

'_____________________Send Break to the ADCP______________________________________________
'Sub SendBreak (ADCPComPort)
'	Banner = ""
'	Warning = ""
'	SerialFlush (ADCPComPort)
'	SerialOpen (ADCPComPort,BaudRate,0,0,2000)
'
'  ' For testing, get wake-up banner
'  SerialOut (ADCPComPort,"+++","",0,0)'send alt break command ()
'  Delay (1,1,Sec)'wait for reply
'	SerialIn (Banner,ADCPComPort,100,">",100) 'get echo of CS command ()
'  SerialFlush (ADCPComPort)
'EndSub

'_____________________Check ADCP incoming data___________________________________
Sub CheckADCPData (ADCPComPort,ADCPDataFlag)
  'Ok we're not getting data, lets record bad ensemble and try to wake up the ADCP
  If NumbytesZero > 7 Then
    BadEnsemble = BadEnsemble + 1 'Mark Bad Ensemble

    'Zero the Channel Master arrays
    'Call ZeroADCPArrays
    ADCPDataFlag = False 'toggle to no
    SerialFlush(ADCPComPort)
    NumbytesZero = 0
  EndIf
  If Numbytes < 1 Then
    'BadEnsemble = BadEnsemble + 1
    NumbytesZero = NumbytesZero + 1
  Else 'we have data
    NumbytesZero = 0
  EndIf
  ReceivedBytes = Numbytes
  i=0
  Counter=1

  'check that the calculated checksum and ensemble checksum match
  'if not flag data, flush serial port, and go to end of scan
  Call ChecksumCheck
  If CalcCheckSum <> EnsChecksum Then
    BadEnsemble = BadEnsemble + 1
    BadChecksum = BadChecksum + 1
    SerialFlush(ADCPComPort)
    'Checksums don't match so bypass decoders and try again
  Else
    'Data is good and checksums match, set flag and call the decoders
    ADCPDataFlag = True
  EndIf
  'Data had passed all checks call decoders
EndSub

'__________Listen to the Com port for incoming data_______________________________
Sub SerialPortListener (ADCPComPort,ADCPDataRead)
  ADCPDataRead = False
  
  'Wait until there is data in the serial buffer
  Delay(0,EsnTime,Sec)
  
  'Read raw data a byte at a time, and rearrange to be MSB first
  Do While SerialInChk(ADCPComPort)
    i=i+1
    SerialInBlock(ADCPComPort,Nums(1),1) 'Get one byte from port
    MoveBytes(Longarray(i),3,Nums(1),0,1) 'Put byte in Least significant position
    Numbytes = i
    ADCPDataRead = True
Loop
EndSub

'_____________________Clear out ADCP arrays______________________________________
Sub ZeroADCPArrays
  'Clear ADCP metadata variables
  ADCPSerialNo  = 0
  ADCPTimeStr   = ""
  ADCPpitch     = Nan
  ADCProll      = Nan
  VBDepth       = Nan
  PDepth        = Nan

  'Zero The raw data array
  For v = 1 To MaxBytes
    Longarray(v) = 0
  Next v

  'Zero the bin velocity arrays
  For Bin = 1 To MaxBins
    For Beam = 1 To MaxBeams
      ensVelocity(Bin,Beam) = Nan
    Next Beam
  Next Bin
  For v = 1 To MaxBins
    Vel1(v) = Nan
    Vel2(v) = Nan
  Next v

  'Zero the bin backscatter arrays
  For Bin = 1 To MaxBins
    For Beam = 1 To MaxBeams
      ensCorrelation(Bin,Beam) = 0
    Next Beam
    avgCorrelation(Bin) = 0
  Next Bin
  For Bin = 1 To MaxBins
    For Beam = 1 To MaxBeams
      ensRSSI(Bin,Beam) = 0
    Next Beam
    avgRSSI(Bin) = 0
  Next Bin
EndSub



' ========================================================================================
' PROGRAM
' ========================================================================================
BeginProg
  'Initialization
  ADCPdataIn1 = False

  'Open ADCP PORT to read binary
  SerialOpen (ADCPCom1,BaudRate,3,0,MaxBytes)

  'This is the main program scan
  Scan (ScanRate,ScanUnit,3,0)
    ScanNo = ScanNo + 1
    PanelTemp(PTemp,250)
    Battery(BVoltage)
    
    '=====================================================================================
    ' READ ADCP 
    '=====================================================================================
    'Time how long it takes to complete the measurement, decode, and processing for ADCP 1
    Timer (1,Sec,2)
    
    'Start ADCP pinging, clear the serial buffer, and wait for raw data
    SerialOut (ADCPCom1,CHR(09),0,0,0)
    SerialFlush (ADCPCom1)
    Call SerialPortListener (ADCPCom1,ADCPDataRead1)

    'Check that the PD0 Header is intact and flag ADCPdataIn TRUE once there is valid PD0
    Call CheckADCPData (ADCPCom1,ADCPdataIn1)

    'Once valid data are in the arrays, go ahead and decode. Then write results to the
    'data table
    If ADCPdataIn1 = True
      Call MainDecode

      'Clear the port so it's ready for the next scan (not necessary?)
      SerialFlush(ADCPCom1)

      'Data table
      'CallTable ADCPcheck1
      CallTable TwoMinute

      'Clear the ADCP arrays so they are empty for next scan/ADCP
      Call ZeroADCPArrays

      'Reset flags      
      ADCPdataIn1   = False
      ADCPDataRead1 = False
    EndIf
    ElapsedTime = Timer (1,Sec,4) 'Processing time for ADCP 1
    '=====================================================================================
          
  'Call the summary table  
  CallTable StationStatus
  NextScan
EndProg

